/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "lib_users_js";
exports.ids = ["lib_users_js"];
exports.modules = {

/***/ "./lib/users.js":
/*!**********************!*\
  !*** ./lib/users.js ***!
  \**********************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"findUser\": function() { return /* binding */ findUser; },\n/* harmony export */   \"isUserExists\": function() { return /* binding */ isUserExists; },\n/* harmony export */   \"login\": function() { return /* binding */ login; },\n/* harmony export */   \"register\": function() { return /* binding */ register; },\n/* harmony export */   \"whoAmI\": function() { return /* binding */ whoAmI; },\n/* harmony export */   \"verifyToken\": function() { return /* binding */ verifyToken; }\n/* harmony export */ });\nconst bcrypt = __webpack_require__(/*! bcrypt */ \"bcrypt\");\n\nconst jwt = __webpack_require__(/*! jsonwebtoken */ \"jsonwebtoken\");\n\nconst jwtSecretKey = 'process.env.JWT_SECRET_KEY';\nconst saltRounds = 10;\nconst salt = bcrypt.genSaltSync(saltRounds);\n/* The `users` variable is an array that stores user objects. Each user object represents a user with\nproperties such as `id`, `username`, `email`, and `password`. In this case, there is only one user\nobject in the array with the following values: */\n\nlet users = [{\n  id: 0,\n  username: \"ron\",\n  email: \"ron@anckr.com\",\n  password: \"$2b$10$Sl8BsmAmJAKUCKlG2FlwZOgbiCGMkEkpgjEfc/FDdFMcq6RFaZjw2\"\n}];\n/**\n * The function `findUser` searches for a user in an array of users based on their username.\n * @param username - The username parameter is a string that represents the username of the user we are\n * trying to find.\n * @returns the user object that matches the given username.\n */\n\nfunction findUser(username) {\n  return users.find(user => user.username === username);\n}\nfunction isUserExists(username) {\n  return findUser(username) || false;\n}\n/**\n * The login function checks if the provided username and password are valid, and if so, generates a\n * JSON Web Token (JWT) for authentication.\n * @param username - The `username` parameter is the username entered by the user during the login\n * process. It is used to identify the user and find their corresponding account information in the\n * system.\n * @param password - The `password` parameter is the password entered by the user during the login\n * process.\n * @returns an object with either an error or a payload property. If there is an error, the object will\n * have an error property with a specific error code and message. If there is no error, the object will\n * have a payload property with a token value.\n */\n\nfunction login(username, password) {\n  if (!username || !password) {\n    return {\n      error: \"WRONG_CREDENTIAL\",\n      message: `Both Username and Password are required.`\n    };\n  }\n\n  if (!isUserExists(username)) {\n    return {\n      error: \"USER_NOT_FOUND\",\n      message: `${username} is not defined, make sure the user is registered before.`\n    };\n  }\n\n  const user = findUser(username); //user={}\n\n  const hashedPassword = hashPassword(password); // console.log(hashedPassword);\n\n  if (!checkPassword(hashedPassword, user.password)) {\n    return {\n      error: \"WRONG_CREDENTIAL\",\n      message: \"Your Password is wrong. Shame on you!(^_^)\"\n    };\n  }\n\n  const token = jwt.sign({\n    username: user.username,\n    email: user.email,\n    id: user.id\n  }, jwtSecretKey, {\n    expiresIn: 3000 // 50min\n\n  });\n  return {\n    payload: {\n      token\n    }\n  };\n}\n/**\n * The `register` function in JavaScript is used to register a user by validating their credentials and\n * adding them to a list of users if they are valid.\n * @returns an object with two properties: \"isSuccessful\" and \"payload\". The value of \"isSuccessful\" is\n * set to true, indicating that the registration was successful. The value of \"payload\" is an empty\n * object.\n */\n\nfunction register({\n  username,\n  password,\n  email\n}) {\n  if (!username || !password || !email) {\n    return errorMessage(\"WRONG_CREDENTIAL\", `Username, password and email is required.`);\n  }\n\n  const emailRegex = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n\n  if (!emailRegex.test(email)) {\n    return errorMessage(\"WRONG_CREDENTIAL\", `${email} is wrong.`);\n  }\n\n  if (isUserExists(username)) {\n    return errorMessage(\"DUPLICATE_USER\", `${username} has already registered. Try another username(But never mind, don't do this.)`);\n  }\n\n  const hashedPassword = hashPassword(password);\n  const lastUser = users[users.length - 1];\n  console.log(lastUser);\n  const id = lastUser ? lastUser.id + 1 : 0;\n  console.log(\"users:before\", users.length);\n  users = users.concat([{\n    username,\n    password: hashedPassword,\n    email,\n    id\n  }]);\n  console.log(\"users:after\", users.length);\n  console.log(\"users\", JSON.stringify(users, null, 2));\n  return {\n    isSuccessful: true,\n    payload: {}\n  };\n}\n/**\n * The function `whoAmI` returns user information if the user exists, otherwise it returns an error\n * message.\n * @param username - The `username` parameter is a string that represents the username of a user.\n * @returns an object with either an error or a successful payload. If the username is not defined or\n * does not exist, an error object is returned with the error code \"USER_NOT_FOUND\" and a message\n * indicating that the user is not defined or registered. If the username exists, a successful payload\n * object is returned with the username, id, and email of the user.\n */\n\nfunction whoAmI(username) {\n  if (!username || !isUserExists(username)) {\n    return {\n      error: \"USER_NOT_FOUND\",\n      message: `${username} is not defined, make sure the user is registered before.`\n    };\n  }\n\n  const user = findUser(username);\n  return {\n    isSuccessful: true,\n    payload: {\n      username: user.username,\n      id: user.id,\n      email: user.email\n    }\n  };\n}\n/**\n * The function hashPassword uses bcrypt to hash a given password using a salt.\n * @param password - The password parameter is the plain text password that you want to hash.\n * @returns the hashed version of the password using bcrypt.\n */\n\nfunction hashPassword(password) {\n  return bcrypt.hashSync(password, salt);\n}\n/**\n * The function checks if a given current hashed password matches a stored hashed password.\n * @param currentHashedPassword - The current hashed password is the hashed version of the password\n * that the user is trying to authenticate with. This is typically stored in a database or some other\n * secure storage.\n * @param hashedPassword - The hashed password is the password that has been transformed using a\n * cryptographic hash function. It is a one-way transformation, meaning it cannot be reversed to obtain\n * the original password. The hashed password is typically stored in a database for security purposes.\n * @returns the result of the comparison between the current hashed password and the hashed password.\n */\n\n\nfunction checkPassword(currentHashedPassword, hashedPassword) {\n  return bcrypt.compare(currentHashedPassword, hashedPassword);\n}\n/**\n * The function `verifyToken` verifies the authenticity of a token using a secret key.\n * @param token - The token parameter is a string that represents a JSON Web Token (JWT).\n * @returns the result of the jwt.verify() function, which is the verification of the token using the\n * jwtSecretKey.\n */\n\n\nfunction verifyToken(token) {\n  return jwt.verify(token, jwtSecretKey);\n}\n/**\n * The function `errorMessage` returns an object with properties `isSuccessful`, `error`, and\n * `message`, with `isSuccessful` set to `false` and the other properties set based on the provided\n * arguments.\n * @param error - The error parameter is used to pass in any error object or error message that\n * occurred during the execution of a function or operation. It can be a string, an error object, or\n * any other type of error representation.\n * @param message - The `message` parameter is a string that represents the error message or\n * description. It is used to provide additional information about the error that occurred.\n * @returns An object with the properties \"isSuccessful\", \"error\", and \"message\" is being returned.\n */\n\nfunction errorMessage(error, message) {\n  return {\n    isSuccessful: false,\n    error,\n    message\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./lib/users.js\n");

/***/ })

};
;